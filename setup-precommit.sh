#!/bin/bash

# Script d'installation Pre-commit pour le projet Matcha
# Usage: ./setup-precommit.sh

set -e

echo "üöÄ Installation de Pre-commit pour le projet Matcha"
echo "=================================================="

# V√©rifier que nous sommes dans le bon r√©pertoire
if [[ ! -f ".pre-commit-config.yaml" ]]; then
    echo "‚ùå Erreur: .pre-commit-config.yaml non trouv√©"
    echo "   Veuillez ex√©cuter ce script depuis la racine du projet Matcha"
    exit 1
fi

# Fonction pour v√©rifier si une commande existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# 1. V√©rifier/installer pre-commit
echo "üì¶ V√©rification de pre-commit..."
if command_exists pre-commit; then
    echo "‚úÖ pre-commit est d√©j√† install√© ($(pre-commit --version))"
else
    echo "‚ö†Ô∏è  pre-commit non trouv√©, tentative d'installation..."

    # D√©tecter le syst√®me d'exploitation
    if [[ -f "/etc/arch-release" ]] && command_exists pacman; then
        echo "üêß Arch Linux d√©tect√©, installation via pipx..."
        if ! command_exists pipx; then
            echo "   Installation de pipx..."
            sudo pacman -S python-pipx --noconfirm || {
                echo "‚ùå Erreur lors de l'installation de pipx"
                exit 1
            }
        fi
        pipx install pre-commit
        echo "‚úÖ pre-commit install√© via pipx"
    elif command_exists pip; then
        # Essayer pip avec --user d'abord
        pip install --user pre-commit 2>/dev/null || {
            echo "‚ö†Ô∏è  Installation syst√®me requise. Utilisation de --break-system-packages..."
            pip install --break-system-packages pre-commit
        }
        echo "‚úÖ pre-commit install√© via pip"
    elif command_exists pip3; then
        pip install --user pre-commit || {
            echo "‚ö†Ô∏è  Installation syst√®me requise. Utilisation de --break-system-packages..."
            pip install --break-system-packages pre-commit
        }
        echo "‚úÖ pre-commit install√© via pip"
    elif command_exists pip3; then
        pip3 install --user pre-commit || {
            echo "‚ö†Ô∏è  Installation syst√®me requise. Utilisation de --break-system-packages..."
            pip3 install --break-system-packages pre-commit
        }
        echo "‚úÖ pre-commit install√© via pip3"
    else
        echo "‚ùå Erreur: ni pip ni pipx trouv√©s. Installation manuelle requise:"
        echo "   Sur Arch: sudo pacman -S python-pipx && pipx install pre-commit"
        echo "   Autres: pip install --user pre-commit"
        exit 1
    fi
fi

# 2. V√©rifier les outils Python
echo "üêç V√©rification des outils Python..."
python_tools=("black" "isort" "flake8")
missing_tools=()

for tool in "${python_tools[@]}"; do
    if command_exists "$tool"; then
        echo "‚úÖ $tool trouv√©"
    else
        missing_tools+=("$tool")
    fi
done

if [ ${#missing_tools[@]} -ne 0 ]; then
    echo "‚ö†Ô∏è  Installation des outils Python manquants: ${missing_tools[*]}"

    # D√©tecter Arch Linux
    if [[ -f "/etc/arch-release" ]] && command_exists pacman; then
        echo "üêß Arch Linux d√©tect√©, installation via pacman..."
        arch_packages=()
        for tool in "${missing_tools[@]}"; do
            case $tool in
                "black") arch_packages+=("python-black") ;;
                "isort") arch_packages+=("python-isort") ;;
                "flake8") arch_packages+=("flake8") ;;
            esac
        done

        if [ ${#arch_packages[@]} -ne 0 ]; then
            sudo pacman -S "${arch_packages[@]}" --noconfirm || {
                echo "‚ö†Ô∏è  Installation pacman √©chou√©e, essai avec pipx..."
                for tool in "${missing_tools[@]}"; do
                    pipx install "$tool" 2>/dev/null || echo "‚ö†Ô∏è  √âchec pipx pour $tool"
                done
            }
        fi
    elif command_exists pip; then
        # Essayer --user d'abord, puis --break-system-packages si n√©cessaire
        pip install --user "${missing_tools[@]}" 2>/dev/null || {
            echo "‚ö†Ô∏è  Installation --user √©chou√©e, utilisation de --break-system-packages..."
            pip install --break-system-packages "${missing_tools[@]}"
        }
    elif command_exists pip3; then
        pip3 install --user "${missing_tools[@]}" 2>/dev/null || {
            echo "‚ö†Ô∏è  Installation --user √©chou√©e, utilisation de --break-system-packages..."
            pip3 install --break-system-packages "${missing_tools[@]}"
        }
    else
        echo "‚ùå Erreur: ni pip ni pacman trouv√©s"
        echo "   Installation manuelle requise pour: ${missing_tools[*]}"
        echo "   Sur Arch: sudo pacman -S python-black python-isort flake8"
        echo "   Autres: pip install --user black isort flake8"
    fi
    echo "‚úÖ Outils Python install√©s"
fi

# 3. V√©rifier Go
echo "üîß V√©rification de Go..."
if command_exists go; then
    echo "‚úÖ Go trouv√© ($(go version))"

    # V√©rifier les modules Go dans chaque service
    for service_dir in api/*/; do
        if [[ -f "$service_dir/go.mod" ]]; then
            echo "üìÅ V√©rification de $service_dir"
            (cd "$service_dir" && go mod download) || echo "‚ö†Ô∏è  Probl√®me avec $service_dir"
        fi
    done
else
    echo "‚ö†Ô∏è  Go non trouv√©. Les hooks Go ne fonctionneront pas."
    echo "   Installez Go depuis: https://golang.org/dl/"
fi

# 4. V√©rifier Node.js et pnpm
echo "üì¶ V√©rification de Node.js et pnpm..."
if command_exists node; then
    echo "‚úÖ Node.js trouv√© ($(node --version))"

    if command_exists pnpm; then
        echo "‚úÖ pnpm trouv√© ($(pnpm --version))"

        # Installer les d√©pendances frontend
        if [[ -f "frontend/package.json" ]]; then
            echo "üìÅ Installation des d√©pendances frontend..."
            (cd frontend && pnpm install) || echo "‚ö†Ô∏è  Probl√®me avec l'installation frontend"
        fi
    else
        echo "‚ö†Ô∏è  pnpm non trouv√©. Les hooks TypeScript ne fonctionneront pas."
        echo "   Installez pnpm: npm install -g pnpm"
    fi
else
    echo "‚ö†Ô∏è  Node.js non trouv√©. Les hooks frontend ne fonctionneront pas."
    echo "   Installez Node.js depuis: https://nodejs.org/"
fi

# 5. Installer les hooks pre-commit
echo "üîó Installation des hooks pre-commit..."
pre-commit install
echo "‚úÖ Hooks pre-commit install√©s"

# 6. Test rapide
echo "üß™ Test de la configuration..."
if pre-commit run --all-files --show-diff-on-failure; then
    echo "‚úÖ Tous les hooks fonctionnent correctement!"
else
    echo "‚ö†Ô∏è  Certains hooks ont √©chou√©. V√©rifiez les erreurs ci-dessus."
    echo "   Vous pouvez ex√©cuter 'pre-commit run --all-files' pour plus de d√©tails."
fi

echo ""
echo "üéâ Installation termin√©e!"
echo ""
echo "üí° Conseils d'utilisation:"
echo "   ‚Ä¢ Les hooks s'ex√©cutent automatiquement √† chaque commit"
echo "   ‚Ä¢ Utilisez 'pre-commit run' pour les ex√©cuter manuellement"
echo "   ‚Ä¢ Consultez doc/Pre-commit_Guide.md pour plus d'informations"
echo ""
echo "üö® En cas de probl√®me:"
echo "   ‚Ä¢ V√©rifiez que vous √™tes dans le bon r√©pertoire de travail"
echo "   ‚Ä¢ Assurez-vous que tous les outils sont install√©s"
echo "   ‚Ä¢ Consultez la documentation dans doc/"
